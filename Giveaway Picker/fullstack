# Project: Giveaway Picker Web (Fullstack)

This single-file bundle contains a complete minimal fullstack web app to manage giveaway participants and run random draws.

---

// FILE: README.md
# Giveaway Picker Web

A minimal fullstack app to manage giveaway participants and perform random draws.

Features:
- Add participants via web form or CSV upload
- List, search, and remove participants
- Run a draw (single or multiple winners) with an animated frontend picker
- Persist data in SQLite
- Export winners as CSV

Quick start:
1. `npm install`
2. `npm run init-db`
3. `npm start`
4. Open `http://localhost:3000`

---

// FILE: package.json
{
  "name": "giveaway-picker-web",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "init-db": "node db_init.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "multer": "^1.4.5-lts.1",
    "sqlite3": "^5.1.6",
    "dotenv": "^16.0.3",
    "csv-parse": "^5.4.0",
    "csv-stringify": "^6.2.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}

---

// FILE: .env.example
PORT=3001

---

// FILE: db_init.js
const sqlite3 = require('sqlite3');
const db = new sqlite3.Database('./giveaway.db');

db.serialize(()=>{
  db.run(`CREATE TABLE IF NOT EXISTS participants (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT,
    meta TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );`);

  db.run(`CREATE TABLE IF NOT EXISTS winners (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    participant_id INTEGER NOT NULL,
    draw_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    draw_name TEXT,
    FOREIGN KEY(participant_id) REFERENCES participants(id)
  );`);

  console.log('Database initialized (giveaway.db)');
  db.close();
});

---

// FILE: server.js
const express = require('express');
const path = require('path');
const sqlite3 = require('sqlite3');
const cors = require('cors');
const multer = require('multer');
const fs = require('fs');
const { parse } = require('csv-parse/sync');
const { stringify } = require('csv-stringify/sync');
const dotenv = require('dotenv');

dotenv.config();
const app = express();
const PORT = process.env.PORT || 3001;
const db = new sqlite3.Database('./giveaway.db');

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({extended:true}));
app.use(express.static(path.join(__dirname,'public')));

const upload = multer({ dest: './uploads' });

// Add participant
app.post('/api/participants', (req,res)=>{
  const { name, email, meta } = req.body;
  if(!name) return res.status(400).json({ error: 'name required' });
  const stmt = db.prepare(`INSERT INTO participants (name,email,meta) VALUES (?, ?, ?)`);
  stmt.run(name, email || null, meta || null, function(err){
    if(err) return res.status(500).json({ error: err.message });
    res.json({ id: this.lastID });
  });
});

// Upload CSV participants
app.post('/api/participants/upload', upload.single('file'), (req,res)=>{
  if(!req.file) return res.status(400).json({ error:'file required' });
  const csv = fs.readFileSync(req.file.path, 'utf8');
  const records = parse(csv, { columns: true, skip_empty_lines: true });
  const stmt = db.prepare(`INSERT INTO participants (name,email,meta) VALUES (?, ?, ?)`);
  db.serialize(()=>{
    for(const r of records){
      const name = r.name || r.Name || r.nama;
      const email = r.email || r.Email || r.email_address || null;
      if(name) stmt.run(name, email, JSON.stringify(r));
    }
    stmt.finalize(()=>{
      fs.unlinkSync(req.file.path);
      res.json({ imported: records.length });
    });
  });
});

// List participants
app.get('/api/participants', (req,res)=>{
  const q = req.query.q || '';
  if(q){
    db.all(`SELECT * FROM participants WHERE name LIKE ? OR email LIKE ? ORDER BY created_at DESC LIMIT 1000`, [`%${q}%`,`%${q}%`], (err,rows)=>{
      if(err) return res.status(500).json({ error: err.message });
      res.json(rows);
    });
  } else {
    db.all(`SELECT * FROM participants ORDER BY created_at DESC LIMIT 1000`, [], (err,rows)=>{
      if(err) return res.status(500).json({ error: err.message });
      res.json(rows);
    });
  }
});

// Delete participant
app.delete('/api/participants/:id', (req,res)=>{
  db.run(`DELETE FROM participants WHERE id = ?`, [req.params.id], function(err){
    if(err) return res.status(500).json({ error: err.message });
    res.json({ deleted: this.changes });
  });
});

// Run draw (select N winners randomly)
app.post('/api/draw', (req,res)=>{
  const { count=1, draw_name } = req.body;
  const n = Math.max(1, Math.min(100, parseInt(count)));
  db.all(`SELECT * FROM participants`, [], (err, rows)=>{
    if(err) return res.status(500).json({ error: err.message });
    if(!rows || rows.length === 0) return res.status(400).json({ error: 'no participants' });
    // shuffle
    for(let i = rows.length-1; i>0; i--){
      const j = Math.floor(Math.random()*(i+1));
      [rows[i], rows[j]] = [rows[j], rows[i]];
    }
    const winners = rows.slice(0,n);
    const stmt = db.prepare(`INSERT INTO winners (participant_id, draw_name) VALUES (?, ?)`);
    db.serialize(()=>{
      for(const w of winners) stmt.run(w.id, draw_name || null);
      stmt.finalize(()=>{
        res.json({ winners });
      });
    });
  });
});

// Export winners CSV
app.get('/api/winners/export', (req,res)=>{
  db.all(`SELECT w.id as win_id, p.* , w.draw_at, w.draw_name FROM winners w JOIN participants p ON p.id = w.participant_id ORDER BY w.draw_at DESC LIMIT 1000`, [], (err, rows)=>{
    if(err) return res.status(500).json({ error: err.message });
    const csv = stringify(rows, { header: true });
    res.setHeader('Content-disposition', 'attachment; filename=winners.csv');
    res.set('Content-Type', 'text/csv');
    res.send(csv);
  });
});

// Serve frontend
app.get('*', (req,res)=>{
  res.sendFile(path.join(__dirname,'public','index.html'));
});

app.listen(PORT, ()=> console.log(`Server listening on ${PORT}`));

---

// FILE: public/index.html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Giveaway Picker</title>
  <link rel="stylesheet" href="/styles.css" />
</head>
<body>
  <main class="wrap">
    <h1>Giveaway Picker â€” Draw your winners</h1>

    <section class="card">
      <h2>Add participant</h2>
      <form id="add-form">
        <input name="name" placeholder="Full name" required />
        <input name="email" placeholder="Email (optional)" />
        <button type="submit">Add</button>
      </form>
    </section>

    <section class="card">
      <h2>Import participants (CSV)</h2>
      <form id="upload-form" enctype="multipart/form-data">
        <input type="file" name="file" accept=".csv" required />
        <button type="submit">Upload CSV</button>
      </form>
    </section>

    <section class="card">
      <h2>Participants</h2>
      <input id="search" placeholder="Search name or email" />
      <div id="participants"></div>
    </section>

    <section class="card">
      <h2>Draw</h2>
      <input id="draw-count" type="number" value="1" min="1" max="100" />
      <input id="draw-name" placeholder="Draw name (optional)" />
      <button id="draw-btn">Start draw</button>
      <div id="picker"></div>
      <div id="winners"></div>
    </section>

    <section class="card">
      <h2>Winners</h2>
      <a href="/api/winners/export">Export winners (CSV)</a>
      <div id="winners-list"></div>
    </section>

  </main>
  <script src="/app.js"></script>
</body>
</html>

---

// FILE: public/styles.css
body{font-family:system-ui,Segoe UI,Roboto,Arial;background:#f4f6f8;color:#111;margin:0;padding:20px}
.wrap{max-width:960px;margin:0 auto}
.card{background:#fff;padding:16px;border-radius:10px;margin-bottom:16px;box-shadow:0 6px 18px rgba(0,0,0,0.06)}
input,button{display:block;width:100%;padding:10px;margin:8px 0;border-radius:6px;border:1px solid #ddd}
#picker{height:120px;display:flex;align-items:center;justify-content:center;font-size:20px}

---

// FILE: public/app.js
async function api(path, opts={}){
  const res = await fetch('/api'+path, opts);
  return res.json();
}

async function loadParticipants(q=''){
  const el = document.getElementById('participants');
  el.innerHTML = 'Loading...';
  const data = await api('/participants?q='+encodeURIComponent(q));
  if(!data || data.length===0){ el.innerHTML = '<i>No participants</i>'; return; }
  el.innerHTML = '<ul>' + data.map(p=>`<li>${p.name} ${p.email?'- '+p.email:''} <button data-id="${p.id}" class="del">Delete</button></li>`).join('') + '</ul>';
  document.querySelectorAll('.del').forEach(b=>b.addEventListener('click', async e=>{
    const id = e.target.dataset.id;
    await fetch('/api/participants/'+id,{ method:'DELETE' });
    loadParticipants(document.getElementById('search').value);
  }));
}

document.getElementById('add-form').addEventListener('submit', async e=>{
  e.preventDefault();
  const fd = new FormData(e.target);
  const body = Object.fromEntries(fd.entries());
  const res = await api('/participants', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
  if(res.id) { e.target.reset(); loadParticipants(); }
});

document.getElementById('upload-form').addEventListener('submit', async e=>{
  e.preventDefault();
  const fd = new FormData(e.target);
  const res = await fetch('/api/participants/upload', { method:'POST', body: fd });
  const j = await res.json();
  alert('Imported: '+ (j.imported||0));
  loadParticipants();
});

document.getElementById('search').addEventListener('input', e=>{
  loadParticipants(e.target.value);
});

async function loadWinners(){
  const el = document.getElementById('winners-list');
  const res = await fetch('/api/winners/export');
  // just fetch metadata by calling participants of winners via API isn't provided; we'll show link
  el.innerHTML = '<i>Use "Export winners" to download CSV of winners.</i>';
}

document.getElementById('draw-btn').addEventListener('click', async ()=>{
  const count = parseInt(document.getElementById('draw-count').value) || 1;
  const draw_name = document.getElementById('draw-name').value || null;
  const res = await api('/draw',{ method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ count, draw_name }) });
  if(res.error) return alert('Error: '+res.error);
  // show animated picker (simple)
  const picker = document.getElementById('picker');
  picker.innerText = 'Picking...';
  await new Promise(r=>setTimeout(r, 800));
  picker.innerText = '';
  const winnersDiv = document.getElementById('winners');
  winnersDiv.innerHTML = '<h3>Winners</h3>' + res.winners.map(w=>`<div>${w.name} ${w.email?'- '+w.email:''}</div>`).join('');
  loadWinners();
});

// initial
loadParticipants();
loadWinners();

---

// FILE: Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE 3001
CMD ["node","server.js"]

---

// FILE: Notes.txt
- CSV upload expects a header row with at least a "name" column. Additional columns are stored in meta.
- This app is minimal and intended for small giveaways. For production use consider rate-limiting, auth for admin, and address validation for physical prizes.


End of project bundle.
